아이템2
생성자에 매개변수가 많다면 빌더패턴을 고려하라
 - 정적 팩토리 메서드, 생성자 모두 매개변수가 많으면 대응이 어려움
 - 보통 0인 값이 많아서 점층적 생성자 패턴(telescoping constructor pattern)을 사용

* 점층적 생성자 패턴(telescoping constructor pattern)
   필수 매개변수 / 필수 + 선택 매개변수 1 / 필수 + 선택 2 / 필수 + 선택 3.... 계속 만드는 방식
   선택 매개변수 중 안넣고 싶어도 0을 넣어야 하는 경우가 있을 수 있음(아래 예시에서 c는 0인데 d는 값이 있는 경우)
   가독성 이슈 : 매개변수가 무엇을 의미하는지 알기 어려움

public class Telescoping {
 String a;
 String b;
 String c;
 String d;

 public Telescoping(String a, String b) {
    this(a,b,0);
 }

 public Telescoping(String a, String b, String c) {
    this(a,b,c,0);
 }

 public Telescoping(String a, String b, String c, String d) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
 }
}

 - 두번째 대안은 자바빈즈 패턴(javaBeans Pattern)
* 자바빈즈 패턴(javaBeans Pattern) : 매개변수 없는 생성자로 객체 생성 후 세터로 매개변수 값 설정
   가독성이 좋음 (세터 메서드에 매개변수 이름이 나오니 어떤 매개변수에 값을 넣었는지 알 수 있다)
   객체 하나를 만들기 위해 여러개의 세터 메서드 호출 필요 -> 세터 메서드 사이에 다른 메서드가 껴 있으면     일관성(Consistency) 무너질 수 있음

 - 세번째 대안 빌더 패턴(Builder Pattern)
* 빌더 패턴 (Builder Pattern)
   필수 매개변수만으로 생성자(or 정적 팩토리)를 호출해 빌더 객체를 얻은 후 -> 세터 메서드로 원하는 선택 매개변수 설정 -> 매개변수 없는 build 메서드로 객체 생성 완료
   쓰고, 읽기 쉬우면서 일관성 이슈도 해결
   각 삽입 메서드(셋터)에서 유효성 검사 진행, builder에서 최종 불변식(ex: strDt < endDt) 검사
   단점 : 성능 (민감한 환경에선 이슈 가능성 있음) / 점층적 생성자 패턴보단 코드가 장황해서 매개변수 4개 이상시 써라 /

public class Telescoping {
 private final String a;
 private final String b;
 private final String c;
 private final String d;

 public static class Builder {
  //필수 매개변수
  private final String a;
  private final String b;
  //선택 매개변수는 기본값으로 초기화
  private final String c = "";
  private final String d = "";

  public Builder(String a, String b) {
   this.a = a;
   this.b = b;
  }

  public Builder c(String c) {
   this.c = c;  //이부분 맞는지 확인 필요
   return this;
  }

  public Builder d(String d) {
   this.d = d;   //이부분 맞는지 확인 필요
   return this;
  }

  public Telescoping build() {
   return new Telescoping(this);
  }
 }

 private Telescoping(Builder builder) {
  a = builder.a;
  b = builder.b;
  c = builder.c;
  d = builder.d;
 }
}

클라이언트 호출 시
Telescoping telescoping = new Telescoping.Builder("a란다", "b란다")
.c("c란다").d("d란다").build();



아이템3
 - 싱글턴 이란? 인스턴스를 오직 하나만 생성할 수 있는 클래스
 - 무상태(stateless) 객체 or 유일해야 하는 컴포넌트에 사용
   * 무상태 객체 : 객체에 상태(데이터나 속성)가 없어서 외부 파라미터가 동일하면 동일한 결과가 나옴
 - 싱글턴 만드는 방법 : 기본은 생성자는 private 이며 2가지로 나눌 수 있음

ex1)
public class Elvis {
    public static final Elvis INSTANCE = new Elvis();
    private Elvis() {

    }

    public void leaveTheBuilding() {

    }
}

 - private 생성자는 Elvis.INSTANCE 초기화 할때 외에는 호출 불가! -> 싱글톤!
 - 리플렉션 API인 AccessibleObject.setAccessible로 private 생성자 호출 가능
   . 호출방법
    // class 객체 가져오기
    Class<?> clazz = Elvis.class;

    //private 생성자 가져오기
    Constructor<?> constructor = clazz.getDeclaredConstructor();

    //private 생성자 접근 가능성 조정
    constructor.setAccessible(true);

    //private 생성자 호출하여 객체 생성
    Elvis elvis = (Elvis) constructor.newInstance();

 - 이런걸 막으려면 두번째 객체가 생성될때 예외처리 추가해주면 됨


ex2)
public class Elvis {
 private static final Elvis INSTANCE = new Elvis();
 private Elvis() {

 }

 public static Elvis getInstance() {
    return INSTANCE;
 }

 public void leaveTheBuilding() {

 }
}

ex3)
public enum Elvis {
    INSTANCE;

    public void leaveTheBuilding() {

    }
}
 - 가장 간단하면서 좋은 방법이다
 - 단점은 Enum 외 클래스를 상속이 필요한 경우 사용 불가

아이템4
 - 자바에서 특정한 목적을 위해 클래스를 인스턴스화 하지 않는 경우가 있음
   1. 추상 클래스로 선언하여 하위클래스만 구체화 하기 위해
   2. 정적 메서드나, 정적 필드를 사용하고 싶을 때 (Arrays 등)
   3. 상수를 정의하는 클래스를 사용할 때(일반적으로 final 선언 및 정적 필드만을 가짐)
   4. 메서드 체이닝시 (빌더패턴에서 new Builder().setA("A").setB("B") 하는 것처럼 연속적으로 할 때
      . 이때 메서드 setA, setB에는 리턴값으로 this를 넣어줘야 함
 - 1번의 경우 하위클래스를 인스턴스화 하면 상위클래스의 생성자가 호출됨(그래야 상위클래스의 필드, 메서드 사용 가능)
 - 그래서 보통은 private으로 생성자를 만든다 -> 단 이러면 상속은 못함

아이템5
 - 클래스가 다른클래스를 의존할 때, 싱글톤 or 정적 유틸리티를 사용하는 경우가 있음

public class SpellChecker {
    private static final Lexicon dictionary = ...;
    private SpellChecker() {}
    public static boolean isValid(String word) { ... }
    public static List<String> suggestions(String typo) { ... }
}
 - 이런 경우 의존하는 Lexicon dictionary가 final로 명시되어 있기 때문에 바꾸기 어렵고(유연성 부족), 다른 객체로 대체도 어렵다(테스트 어려움)
   . final 빼면 싱글톤 패턴이 아님 -> 멀티 쓰레드에서 사용 어려움
 - 이때 의존 객체 주입 패턴을 사용하면 좋다

public class SpellChecker {
    private final Lexicon dictionary;

    public SpellChecker(Lexicon dictionary) {
        this.dictionary = Object.requireNonNull(dictionary);
    }

    public boolean isValid(String word) {
    }

    public List<String> suggestions(String typo) {
    }
}

아이템6
 - 생성자 대신 정적 팩터리 메서드를 제공하는 불변클래스가 있다면 그거 사용해라
   . Boolean(String) : 사용할 때 마다 객체 생성
   . Boolean.valueOf(String) : 객체 1회 생성 후 재사용
 - 생성비용이 비싼 객체는 캐싱해서 재사용 하도록 하자
   . String.matches() : 실행시 마다 Pattern 객체 생성 후 버림
    -> Pattern을 static fianl로 만들어서 재사용 하자!
      . 문제점 : 클래스 초기화 후 한번도 메서드 사용 안하면 쓸데없이 초기화 된 꼴
      . lazy initialization(지연초기화)로 할 수 있지만 코드 복잡해지고, 성능 크게 개선 안되어서 비추천

public class RomanNumerals {
    private static final Pattern ROMAN = Pattern.compile(
        "......" + "......");
    static boolean isRomanNumeral(String s) {
        return ROMAN.matcher(s).matches();
    }
}

 - Map 인터페이스의 keySet 메서드
    . 호출 할 때마다 같은 인스턴스를 반환
    . 또한 map의 키값을 추가하거나 지우면, 전에 인스턴스화 한 set도 변경 됨
    . 반대로 인스턴스화 한 set을 추가하거나 지우면, map의 키값도 변경 됨
    -> keySet 메서드로 다수의 인스턴스 생성하는 짓은 불필요 함!
Set<String> a = map.keySet();
Set<String> b = map.keySet();
a == b ? //true

 - 오토박싱
    . 기본타입(int, double, boolean)을 래퍼타입(Integer, Double, Boolean)으로 자동형변환 해주는
    . 형변환시 새로운 객체가 생성되어 성능저하 발생

※ 총 정리 : 무조건 객체를 새로 만들자가 아니라, 객체 재사용이 가능 하다면 만들지 말자는 뜻!

아이템7
