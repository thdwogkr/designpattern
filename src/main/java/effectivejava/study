아이템2
생성자에 매개변수가 많다면 빌더패턴을 고려하라
 - 정적 팩토리 메서드, 생성자 모두 매개변수가 많으면 대응이 어려움
 - 보통 0인 값이 많아서 점층적 생성자 패턴(telescoping constructor pattern)을 사용

* 점층적 생성자 패턴(telescoping constructor pattern)
   필수 매개변수 / 필수 + 선택 매개변수 1 / 필수 + 선택 2 / 필수 + 선택 3.... 계속 만드는 방식
   선택 매개변수 중 안넣고 싶어도 0을 넣어야 하는 경우가 있을 수 있음(아래 예시에서 c는 0인데 d는 값이 있는 경우)
   가독성 이슈 : 매개변수가 무엇을 의미하는지 알기 어려움

public class Telescoping {
 String a;
 String b;
 String c;
 String d;

 public Telescoping(String a, String b) {
    this(a,b,0);
 }

 public Telescoping(String a, String b, String c) {
    this(a,b,c,0);
 }

 public Telescoping(String a, String b, String c, String d) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
 }
}

 - 두번째 대안은 자바빈즈 패턴(javaBeans Pattern)
* 자바빈즈 패턴(javaBeans Pattern) : 매개변수 없는 생성자로 객체 생성 후 세터로 매개변수 값 설정
   가독성이 좋음 (세터 메서드에 매개변수 이름이 나오니 어떤 매개변수에 값을 넣었는지 알 수 있다)
   객체 하나를 만들기 위해 여러개의 세터 메서드 호출 필요 -> 세터 메서드 사이에 다른 메서드가 껴 있으면     일관성(Consistency) 무너질 수 있음

 - 세번째 대안 빌더 패턴(Builder Pattern)
* 빌더 패턴 (Builder Pattern)
   필수 매개변수만으로 생성자(or 정적 팩토리)를 호출해 빌더 객체를 얻은 후 -> 세터 메서드로 원하는 선택 매개변수 설정 -> 매개변수 없는 build 메서드로 객체 생성 완료
   쓰고, 읽기 쉬우면서 일관성 이슈도 해결
   각 삽입 메서드(셋터)에서 유효성 검사 진행, builder에서 최종 불변식(ex: strDt < endDt) 검사
   단점 : 성능 (민감한 환경에선 이슈 가능성 있음) / 점층적 생성자 패턴보단 코드가 장황해서 매개변수 4개 이상시 써라 /

public class Telescoping {
 private final String a;
 private final String b;
 private final String c;
 private final String d;

 public static class Builder {
  //필수 매개변수
  private final String a;
  private final String b;
  //선택 매개변수는 기본값으로 초기화
  private final String c = "";
  private final String d = "";

  public Builder(String a, String b) {
   this.a = a;
   this.b = b;
  }

  public Builder c(String c) {
   this.c = c;  //이부분 맞는지 확인 필요
   return this;
  }

  public Builder d(String d) {
   this.d = d;   //이부분 맞는지 확인 필요
   return this;
  }

  public Telescoping build() {
   return new Telescoping(this);
  }
 }

 private Telescoping(Builder builder) {
  a = builder.a;
  b = builder.b;
  c = builder.c;
  d = builder.d;
 }
}

클라이언트 호출 시
Telescoping telescoping = new Telescoping.Builder("a란다", "b란다")
.c("c란다").d("d란다").build();



아이템3
 - 싱글턴 이란? 인스턴스를 오직 하나만 생성할 수 있는 클래스
 - 무상태(stateless) 객체 or 유일해야 하는 컴포넌트에 사용
   * 무상태 객체 : 객체에 상태(데이터나 속성)가 없어서 외부 파라미터가 동일하면 동일한 결과가 나옴
 - 싱글턴 만드는 방법 : 기본은 생성자는 private이며 2가지로 나눌 수 있음

ex1)
public class Elvis {
    public static final Elvis INSTANCE = new Elvis();
    private Elvis() {

    }

    public void leaveTheBuilding() {

    }
}

 - private 생성자는 Elvis.INSTANCE 초기화 할때 외에는 호출 불가! -> 싱글톤!
 - 리플렉션 API인 AccessibleObject.setAccessible로 private 생성자 호출 가능